// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AsrService.proto
#ifndef GRPC_AsrService_2eproto__INCLUDED
#define GRPC_AsrService_2eproto__INCLUDED

#include "AsrService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace Speechpro {
namespace Cloud {
namespace ASR {

class SpeechRecognition final {
 public:
  static constexpr char const* service_full_name() {
    return "Speechpro.Cloud.ASR.SpeechRecognition";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::Speechpro::Cloud::ASR::ListOfModels* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Speechpro::Cloud::ASR::ListOfModels>> AsyncGetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Speechpro::Cloud::ASR::ListOfModels>>(AsyncGetListOfSpeechRecognitionModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Speechpro::Cloud::ASR::ListOfModels>> PrepareAsyncGetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Speechpro::Cloud::ASR::ListOfModels>>(PrepareAsyncGetListOfSpeechRecognitionModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>> RecognizeSpeech(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>>(RecognizeSpeechRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>> AsyncRecognizeSpeech(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>>(AsyncRecognizeSpeechRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>> PrepareAsyncRecognizeSpeech(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>>(PrepareAsyncRecognizeSpeechRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth* request, ::Speechpro::Cloud::ASR::ListOfModels* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Speechpro::Cloud::ASR::ListOfModels* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth* request, ::Speechpro::Cloud::ASR::ListOfModels* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Speechpro::Cloud::ASR::ListOfModels* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RecognizeSpeech(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Speechpro::Cloud::ASR::RecognizeRequest,::Speechpro::Cloud::ASR::SpeechRecognitionResults>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Speechpro::Cloud::ASR::ListOfModels>* AsyncGetListOfSpeechRecognitionModelsRaw(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Speechpro::Cloud::ASR::ListOfModels>* PrepareAsyncGetListOfSpeechRecognitionModelsRaw(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* RecognizeSpeechRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* AsyncRecognizeSpeechRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* PrepareAsyncRecognizeSpeechRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::Speechpro::Cloud::ASR::ListOfModels* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Speechpro::Cloud::ASR::ListOfModels>> AsyncGetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Speechpro::Cloud::ASR::ListOfModels>>(AsyncGetListOfSpeechRecognitionModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Speechpro::Cloud::ASR::ListOfModels>> PrepareAsyncGetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Speechpro::Cloud::ASR::ListOfModels>>(PrepareAsyncGetListOfSpeechRecognitionModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>> RecognizeSpeech(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>>(RecognizeSpeechRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>> AsyncRecognizeSpeech(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>>(AsyncRecognizeSpeechRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>> PrepareAsyncRecognizeSpeech(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>>(PrepareAsyncRecognizeSpeechRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth* request, ::Speechpro::Cloud::ASR::ListOfModels* response, std::function<void(::grpc::Status)>) override;
      void GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Speechpro::Cloud::ASR::ListOfModels* response, std::function<void(::grpc::Status)>) override;
      void GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth* request, ::Speechpro::Cloud::ASR::ListOfModels* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Speechpro::Cloud::ASR::ListOfModels* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RecognizeSpeech(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Speechpro::Cloud::ASR::RecognizeRequest,::Speechpro::Cloud::ASR::SpeechRecognitionResults>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Speechpro::Cloud::ASR::ListOfModels>* AsyncGetListOfSpeechRecognitionModelsRaw(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Speechpro::Cloud::ASR::ListOfModels>* PrepareAsyncGetListOfSpeechRecognitionModelsRaw(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* RecognizeSpeechRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* AsyncRecognizeSpeechRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* PrepareAsyncRecognizeSpeechRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetListOfSpeechRecognitionModels_;
    const ::grpc::internal::RpcMethod rpcmethod_RecognizeSpeech_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetListOfSpeechRecognitionModels(::grpc::ServerContext* context, const ::Speechpro::Cloud::ASR::Auth* request, ::Speechpro::Cloud::ASR::ListOfModels* response);
    virtual ::grpc::Status RecognizeSpeech(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Speechpro::Cloud::ASR::SpeechRecognitionResults, ::Speechpro::Cloud::ASR::RecognizeRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetListOfSpeechRecognitionModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetListOfSpeechRecognitionModels() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetListOfSpeechRecognitionModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListOfSpeechRecognitionModels(::grpc::ServerContext* /*context*/, const ::Speechpro::Cloud::ASR::Auth* /*request*/, ::Speechpro::Cloud::ASR::ListOfModels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetListOfSpeechRecognitionModels(::grpc::ServerContext* context, ::Speechpro::Cloud::ASR::Auth* request, ::grpc::ServerAsyncResponseWriter< ::Speechpro::Cloud::ASR::ListOfModels>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecognizeSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecognizeSpeech() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RecognizeSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeSpeech(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Speechpro::Cloud::ASR::SpeechRecognitionResults, ::Speechpro::Cloud::ASR::RecognizeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecognizeSpeech(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::Speechpro::Cloud::ASR::SpeechRecognitionResults, ::Speechpro::Cloud::ASR::RecognizeRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetListOfSpeechRecognitionModels<WithAsyncMethod_RecognizeSpeech<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetListOfSpeechRecognitionModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetListOfSpeechRecognitionModels() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Speechpro::Cloud::ASR::Auth, ::Speechpro::Cloud::ASR::ListOfModels>(
          [this](::grpc::ServerContext* context,
                 const ::Speechpro::Cloud::ASR::Auth* request,
                 ::Speechpro::Cloud::ASR::ListOfModels* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetListOfSpeechRecognitionModels(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetListOfSpeechRecognitionModels(
        ::grpc::experimental::MessageAllocator< ::Speechpro::Cloud::ASR::Auth, ::Speechpro::Cloud::ASR::ListOfModels>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Speechpro::Cloud::ASR::Auth, ::Speechpro::Cloud::ASR::ListOfModels>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetListOfSpeechRecognitionModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListOfSpeechRecognitionModels(::grpc::ServerContext* /*context*/, const ::Speechpro::Cloud::ASR::Auth* /*request*/, ::Speechpro::Cloud::ASR::ListOfModels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetListOfSpeechRecognitionModels(::grpc::ServerContext* /*context*/, const ::Speechpro::Cloud::ASR::Auth* /*request*/, ::Speechpro::Cloud::ASR::ListOfModels* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecognizeSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecognizeSpeech() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackBidiHandler< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>(
          [this] { return this->RecognizeSpeech(); }));
    }
    ~ExperimentalWithCallbackMethod_RecognizeSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeSpeech(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Speechpro::Cloud::ASR::SpeechRecognitionResults, ::Speechpro::Cloud::ASR::RecognizeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* RecognizeSpeech() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>;}
  };
  typedef ExperimentalWithCallbackMethod_GetListOfSpeechRecognitionModels<ExperimentalWithCallbackMethod_RecognizeSpeech<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetListOfSpeechRecognitionModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetListOfSpeechRecognitionModels() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetListOfSpeechRecognitionModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListOfSpeechRecognitionModels(::grpc::ServerContext* /*context*/, const ::Speechpro::Cloud::ASR::Auth* /*request*/, ::Speechpro::Cloud::ASR::ListOfModels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecognizeSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecognizeSpeech() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RecognizeSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeSpeech(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Speechpro::Cloud::ASR::SpeechRecognitionResults, ::Speechpro::Cloud::ASR::RecognizeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetListOfSpeechRecognitionModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetListOfSpeechRecognitionModels() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetListOfSpeechRecognitionModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListOfSpeechRecognitionModels(::grpc::ServerContext* /*context*/, const ::Speechpro::Cloud::ASR::Auth* /*request*/, ::Speechpro::Cloud::ASR::ListOfModels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetListOfSpeechRecognitionModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecognizeSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecognizeSpeech() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RecognizeSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeSpeech(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Speechpro::Cloud::ASR::SpeechRecognitionResults, ::Speechpro::Cloud::ASR::RecognizeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecognizeSpeech(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetListOfSpeechRecognitionModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetListOfSpeechRecognitionModels() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetListOfSpeechRecognitionModels(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetListOfSpeechRecognitionModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListOfSpeechRecognitionModels(::grpc::ServerContext* /*context*/, const ::Speechpro::Cloud::ASR::Auth* /*request*/, ::Speechpro::Cloud::ASR::ListOfModels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetListOfSpeechRecognitionModels(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecognizeSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecognizeSpeech() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->RecognizeSpeech(); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecognizeSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeSpeech(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Speechpro::Cloud::ASR::SpeechRecognitionResults, ::Speechpro::Cloud::ASR::RecognizeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* RecognizeSpeech() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetListOfSpeechRecognitionModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetListOfSpeechRecognitionModels() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Speechpro::Cloud::ASR::Auth, ::Speechpro::Cloud::ASR::ListOfModels>(std::bind(&WithStreamedUnaryMethod_GetListOfSpeechRecognitionModels<BaseClass>::StreamedGetListOfSpeechRecognitionModels, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetListOfSpeechRecognitionModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetListOfSpeechRecognitionModels(::grpc::ServerContext* /*context*/, const ::Speechpro::Cloud::ASR::Auth* /*request*/, ::Speechpro::Cloud::ASR::ListOfModels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetListOfSpeechRecognitionModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Speechpro::Cloud::ASR::Auth,::Speechpro::Cloud::ASR::ListOfModels>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetListOfSpeechRecognitionModels<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetListOfSpeechRecognitionModels<Service > StreamedService;
};

}  // namespace ASR
}  // namespace Cloud
}  // namespace Speechpro


#endif  // GRPC_AsrService_2eproto__INCLUDED
