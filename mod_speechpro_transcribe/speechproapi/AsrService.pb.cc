// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AsrService.proto

#include "AsrService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_AsrService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Auth_AsrService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Finish_base_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Model_base_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AsrService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RecognitionConfig_AsrService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sound_base_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Text_base_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AsrService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserTranscriptions_AsrService_2eproto;
namespace Speechpro {
namespace Cloud {
namespace ASR {
class RecognizeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecognizeRequest> _instance;
  const ::Speechpro::Cloud::ASR::RecognitionConfig* config_;
  const ::Speechpro::Cloud::ASR::Sound* sound_;
  const ::Speechpro::Cloud::ASR::Finish* finish_;
} _RecognizeRequest_default_instance_;
class RecognitionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecognitionConfig> _instance;
} _RecognitionConfig_default_instance_;
class AuthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Auth> _instance;
} _Auth_default_instance_;
class UserTranscriptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserTranscriptions> _instance;
} _UserTranscriptions_default_instance_;
class SpeechRecognitionResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeechRecognitionResults> _instance;
} _SpeechRecognitionResults_default_instance_;
}  // namespace ASR
}  // namespace Cloud
}  // namespace Speechpro
static void InitDefaultsscc_info_Auth_AsrService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_Auth_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::Auth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::Auth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Auth_AsrService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Auth_AsrService_2eproto}, {}};

static void InitDefaultsscc_info_RecognitionConfig_AsrService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_RecognitionConfig_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::RecognitionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::RecognitionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RecognitionConfig_AsrService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RecognitionConfig_AsrService_2eproto}, {
      &scc_info_Model_base_2eproto.base,
      &scc_info_UserTranscriptions_AsrService_2eproto.base,
      &scc_info_Auth_AsrService_2eproto.base,}};

static void InitDefaultsscc_info_RecognizeRequest_AsrService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_RecognizeRequest_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::RecognizeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::RecognizeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RecognizeRequest_AsrService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RecognizeRequest_AsrService_2eproto}, {
      &scc_info_RecognitionConfig_AsrService_2eproto.base,
      &scc_info_Sound_base_2eproto.base,
      &scc_info_Finish_base_2eproto.base,}};

static void InitDefaultsscc_info_SpeechRecognitionResults_AsrService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_SpeechRecognitionResults_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::SpeechRecognitionResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::SpeechRecognitionResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeechRecognitionResults_AsrService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpeechRecognitionResults_AsrService_2eproto}, {
      &scc_info_Text_base_2eproto.base,}};

static void InitDefaultsscc_info_UserTranscriptions_AsrService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_UserTranscriptions_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::UserTranscriptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::UserTranscriptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserTranscriptions_AsrService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserTranscriptions_AsrService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AsrService_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AsrService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AsrService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AsrService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::RecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::RecognizeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Speechpro::Cloud::ASR::RecognizeRequestDefaultTypeInternal, config_),
  offsetof(::Speechpro::Cloud::ASR::RecognizeRequestDefaultTypeInternal, sound_),
  offsetof(::Speechpro::Cloud::ASR::RecognizeRequestDefaultTypeInternal, finish_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::RecognizeRequest, recognize_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::RecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::RecognitionConfig, model_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::RecognitionConfig, additional_words_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::RecognitionConfig, user_transcriptions_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::RecognitionConfig, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Auth, client_id_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Auth, domain_id_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Auth, api_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::UserTranscriptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::UserTranscriptions, word_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::UserTranscriptions, transcription_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::SpeechRecognitionResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::SpeechRecognitionResults, text_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::SpeechRecognitionResults, phrase_confidence_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::SpeechRecognitionResults, is_final_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Speechpro::Cloud::ASR::RecognizeRequest)},
  { 9, -1, sizeof(::Speechpro::Cloud::ASR::RecognitionConfig)},
  { 18, -1, sizeof(::Speechpro::Cloud::ASR::Auth)},
  { 26, -1, sizeof(::Speechpro::Cloud::ASR::UserTranscriptions)},
  { 33, -1, sizeof(::Speechpro::Cloud::ASR::SpeechRecognitionResults)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_RecognizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_RecognitionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_Auth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_UserTranscriptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_SpeechRecognitionResults_default_instance_),
};

const char descriptor_table_protodef_AsrService_2eproto[] =
  "\n\020AsrService.proto\022\023Speechpro.Cloud.ASR\032"
  "\nbase.proto\"\275\001\n\020RecognizeRequest\0228\n\006conf"
  "ig\030\001 \001(\0132&.Speechpro.Cloud.ASR.Recogniti"
  "onConfigH\000\022+\n\005sound\030\002 \001(\0132\032.Speechpro.Cl"
  "oud.ASR.SoundH\000\022-\n\006finish\030\003 \001(\0132\033.Speech"
  "pro.Cloud.ASR.FinishH\000B\023\n\021recognize_requ"
  "est\"\307\001\n\021RecognitionConfig\022)\n\005model\030\001 \001(\013"
  "2\032.Speechpro.Cloud.ASR.Model\022\030\n\020addition"
  "al_words\030\002 \003(\t\022D\n\023user_transcriptions\030\003 "
  "\003(\0132\'.Speechpro.Cloud.ASR.UserTranscript"
  "ions\022\'\n\004auth\030\004 \001(\0132\031.Speechpro.Cloud.ASR"
  ".Auth\"=\n\004Auth\022\021\n\tclient_id\030\001 \001(\t\022\021\n\tdoma"
  "in_id\030\002 \001(\t\022\017\n\007api_key\030\003 \001(\t\"9\n\022UserTran"
  "scriptions\022\014\n\004word\030\001 \001(\t\022\025\n\rtranscriptio"
  "n\030\002 \001(\t\"p\n\030SpeechRecognitionResults\022\'\n\004t"
  "ext\030\001 \001(\0132\031.Speechpro.Cloud.ASR.Text\022\031\n\021"
  "phrase_confidence\030\002 \001(\002\022\020\n\010is_final\030\003 \001("
  "\0102\342\001\n\021SpeechRecognition\022`\n GetListOfSpee"
  "chRecognitionModels\022\031.Speechpro.Cloud.AS"
  "R.Auth\032!.Speechpro.Cloud.ASR.ListOfModel"
  "s\022k\n\017RecognizeSpeech\022%.Speechpro.Cloud.A"
  "SR.RecognizeRequest\032-.Speechpro.Cloud.AS"
  "R.SpeechRecognitionResults(\0010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AsrService_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_AsrService_2eproto_sccs[5] = {
  &scc_info_Auth_AsrService_2eproto.base,
  &scc_info_RecognitionConfig_AsrService_2eproto.base,
  &scc_info_RecognizeRequest_AsrService_2eproto.base,
  &scc_info_SpeechRecognitionResults_AsrService_2eproto.base,
  &scc_info_UserTranscriptions_AsrService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AsrService_2eproto_once;
static bool descriptor_table_AsrService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AsrService_2eproto = {
  &descriptor_table_AsrService_2eproto_initialized, descriptor_table_protodef_AsrService_2eproto, "AsrService.proto", 918,
  &descriptor_table_AsrService_2eproto_once, descriptor_table_AsrService_2eproto_sccs, descriptor_table_AsrService_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_AsrService_2eproto::offsets,
  file_level_metadata_AsrService_2eproto, 5, file_level_enum_descriptors_AsrService_2eproto, file_level_service_descriptors_AsrService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_AsrService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_AsrService_2eproto), true);
namespace Speechpro {
namespace Cloud {
namespace ASR {

// ===================================================================

void RecognizeRequest::InitAsDefaultInstance() {
  ::Speechpro::Cloud::ASR::_RecognizeRequest_default_instance_.config_ = const_cast< ::Speechpro::Cloud::ASR::RecognitionConfig*>(
      ::Speechpro::Cloud::ASR::RecognitionConfig::internal_default_instance());
  ::Speechpro::Cloud::ASR::_RecognizeRequest_default_instance_.sound_ = const_cast< ::Speechpro::Cloud::ASR::Sound*>(
      ::Speechpro::Cloud::ASR::Sound::internal_default_instance());
  ::Speechpro::Cloud::ASR::_RecognizeRequest_default_instance_.finish_ = const_cast< ::Speechpro::Cloud::ASR::Finish*>(
      ::Speechpro::Cloud::ASR::Finish::internal_default_instance());
}
class RecognizeRequest::HasBitSetters {
 public:
  static const ::Speechpro::Cloud::ASR::RecognitionConfig& config(const RecognizeRequest* msg);
  static const ::Speechpro::Cloud::ASR::Sound& sound(const RecognizeRequest* msg);
  static const ::Speechpro::Cloud::ASR::Finish& finish(const RecognizeRequest* msg);
};

const ::Speechpro::Cloud::ASR::RecognitionConfig&
RecognizeRequest::HasBitSetters::config(const RecognizeRequest* msg) {
  return *msg->recognize_request_.config_;
}
const ::Speechpro::Cloud::ASR::Sound&
RecognizeRequest::HasBitSetters::sound(const RecognizeRequest* msg) {
  return *msg->recognize_request_.sound_;
}
const ::Speechpro::Cloud::ASR::Finish&
RecognizeRequest::HasBitSetters::finish(const RecognizeRequest* msg) {
  return *msg->recognize_request_.finish_;
}
void RecognizeRequest::set_allocated_config(::Speechpro::Cloud::ASR::RecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_recognize_request();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    recognize_request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:Speechpro.Cloud.ASR.RecognizeRequest.config)
}
void RecognizeRequest::set_allocated_sound(::Speechpro::Cloud::ASR::Sound* sound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_recognize_request();
  if (sound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound, submessage_arena);
    }
    set_has_sound();
    recognize_request_.sound_ = sound;
  }
  // @@protoc_insertion_point(field_set_allocated:Speechpro.Cloud.ASR.RecognizeRequest.sound)
}
void RecognizeRequest::clear_sound() {
  if (has_sound()) {
    delete recognize_request_.sound_;
    clear_has_recognize_request();
  }
}
void RecognizeRequest::set_allocated_finish(::Speechpro::Cloud::ASR::Finish* finish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_recognize_request();
  if (finish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      finish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish, submessage_arena);
    }
    set_has_finish();
    recognize_request_.finish_ = finish;
  }
  // @@protoc_insertion_point(field_set_allocated:Speechpro.Cloud.ASR.RecognizeRequest.finish)
}
void RecognizeRequest::clear_finish() {
  if (has_finish()) {
    delete recognize_request_.finish_;
    clear_has_recognize_request();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeRequest::kConfigFieldNumber;
const int RecognizeRequest::kSoundFieldNumber;
const int RecognizeRequest::kFinishFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeRequest::RecognizeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_recognize_request();
  switch (from.recognize_request_case()) {
    case kConfig: {
      mutable_config()->::Speechpro::Cloud::ASR::RecognitionConfig::MergeFrom(from.config());
      break;
    }
    case kSound: {
      mutable_sound()->::Speechpro::Cloud::ASR::Sound::MergeFrom(from.sound());
      break;
    }
    case kFinish: {
      mutable_finish()->::Speechpro::Cloud::ASR::Finish::MergeFrom(from.finish());
      break;
    }
    case RECOGNIZE_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.RecognizeRequest)
}

void RecognizeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecognizeRequest_AsrService_2eproto.base);
  clear_has_recognize_request();
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.RecognizeRequest)
  SharedDtor();
}

void RecognizeRequest::SharedDtor() {
  if (has_recognize_request()) {
    clear_recognize_request();
  }
}

void RecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecognizeRequest& RecognizeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecognizeRequest_AsrService_2eproto.base);
  return *internal_default_instance();
}


void RecognizeRequest::clear_recognize_request() {
// @@protoc_insertion_point(one_of_clear_start:Speechpro.Cloud.ASR.RecognizeRequest)
  switch (recognize_request_case()) {
    case kConfig: {
      delete recognize_request_.config_;
      break;
    }
    case kSound: {
      delete recognize_request_.sound_;
      break;
    }
    case kFinish: {
      delete recognize_request_.finish_;
      break;
    }
    case RECOGNIZE_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECOGNIZE_REQUEST_NOT_SET;
}


void RecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.RecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_recognize_request();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecognizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Speechpro.Cloud.ASR.RecognitionConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Speechpro.Cloud.ASR.Sound sound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Speechpro.Cloud.ASR.Finish finish = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_finish(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecognizeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.RecognizeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Speechpro.Cloud.ASR.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Speechpro.Cloud.ASR.Sound sound = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Speechpro.Cloud.ASR.Finish finish = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_finish()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.RecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.RecognizeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecognizeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.RecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Speechpro.Cloud.ASR.RecognitionConfig config = 1;
  if (has_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::config(this), output);
  }

  // .Speechpro.Cloud.ASR.Sound sound = 2;
  if (has_sound()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::sound(this), output);
  }

  // .Speechpro.Cloud.ASR.Finish finish = 3;
  if (has_finish()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::finish(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.RecognizeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognizeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.RecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Speechpro.Cloud.ASR.RecognitionConfig config = 1;
  if (has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::config(this), target);
  }

  // .Speechpro.Cloud.ASR.Sound sound = 2;
  if (has_sound()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::sound(this), target);
  }

  // .Speechpro.Cloud.ASR.Finish finish = 3;
  if (has_finish()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::finish(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.RecognizeRequest)
  return target;
}

size_t RecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.RecognizeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (recognize_request_case()) {
    // .Speechpro.Cloud.ASR.RecognitionConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recognize_request_.config_);
      break;
    }
    // .Speechpro.Cloud.ASR.Sound sound = 2;
    case kSound: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recognize_request_.sound_);
      break;
    }
    // .Speechpro.Cloud.ASR.Finish finish = 3;
    case kFinish: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recognize_request_.finish_);
      break;
    }
    case RECOGNIZE_REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognizeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.RecognizeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.RecognizeRequest)
    MergeFrom(*source);
  }
}

void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.recognize_request_case()) {
    case kConfig: {
      mutable_config()->::Speechpro::Cloud::ASR::RecognitionConfig::MergeFrom(from.config());
      break;
    }
    case kSound: {
      mutable_sound()->::Speechpro::Cloud::ASR::Sound::MergeFrom(from.sound());
      break;
    }
    case kFinish: {
      mutable_finish()->::Speechpro::Cloud::ASR::Finish::MergeFrom(from.finish());
      break;
    }
    case RECOGNIZE_REQUEST_NOT_SET: {
      break;
    }
  }
}

void RecognizeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {
  return true;
}

void RecognizeRequest::Swap(RecognizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(recognize_request_, other->recognize_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecognitionConfig::InitAsDefaultInstance() {
  ::Speechpro::Cloud::ASR::_RecognitionConfig_default_instance_._instance.get_mutable()->model_ = const_cast< ::Speechpro::Cloud::ASR::Model*>(
      ::Speechpro::Cloud::ASR::Model::internal_default_instance());
  ::Speechpro::Cloud::ASR::_RecognitionConfig_default_instance_._instance.get_mutable()->auth_ = const_cast< ::Speechpro::Cloud::ASR::Auth*>(
      ::Speechpro::Cloud::ASR::Auth::internal_default_instance());
}
class RecognitionConfig::HasBitSetters {
 public:
  static const ::Speechpro::Cloud::ASR::Model& model(const RecognitionConfig* msg);
  static const ::Speechpro::Cloud::ASR::Auth& auth(const RecognitionConfig* msg);
};

const ::Speechpro::Cloud::ASR::Model&
RecognitionConfig::HasBitSetters::model(const RecognitionConfig* msg) {
  return *msg->model_;
}
const ::Speechpro::Cloud::ASR::Auth&
RecognitionConfig::HasBitSetters::auth(const RecognitionConfig* msg) {
  return *msg->auth_;
}
void RecognitionConfig::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionConfig::kModelFieldNumber;
const int RecognitionConfig::kAdditionalWordsFieldNumber;
const int RecognitionConfig::kUserTranscriptionsFieldNumber;
const int RecognitionConfig::kAuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionConfig::RecognitionConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(const RecognitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      additional_words_(from.additional_words_),
      user_transcriptions_(from.user_transcriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_model()) {
    model_ = new ::Speechpro::Cloud::ASR::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  if (from.has_auth()) {
    auth_ = new ::Speechpro::Cloud::ASR::Auth(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.RecognitionConfig)
}

void RecognitionConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecognitionConfig_AsrService_2eproto.base);
  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_) -
      reinterpret_cast<char*>(&model_)) + sizeof(auth_));
}

RecognitionConfig::~RecognitionConfig() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.RecognitionConfig)
  SharedDtor();
}

void RecognitionConfig::SharedDtor() {
  if (this != internal_default_instance()) delete model_;
  if (this != internal_default_instance()) delete auth_;
}

void RecognitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecognitionConfig& RecognitionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecognitionConfig_AsrService_2eproto.base);
  return *internal_default_instance();
}


void RecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.RecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_words_.Clear();
  user_transcriptions_.Clear();
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecognitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Speechpro.Cloud.ASR.Model model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string additional_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_additional_words(), ptr, ctx, "Speechpro.Cloud.ASR.RecognitionConfig.additional_words");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Speechpro.Cloud.ASR.UserTranscriptions user_transcriptions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user_transcriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .Speechpro.Cloud.ASR.Auth auth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecognitionConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.RecognitionConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Speechpro.Cloud.ASR.Model model = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string additional_words = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_additional_words()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->additional_words(this->additional_words_size() - 1).data(),
            static_cast<int>(this->additional_words(this->additional_words_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Speechpro.Cloud.ASR.RecognitionConfig.additional_words"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Speechpro.Cloud.ASR.UserTranscriptions user_transcriptions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_transcriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Speechpro.Cloud.ASR.Auth auth = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.RecognitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.RecognitionConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecognitionConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.RecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Speechpro.Cloud.ASR.Model model = 1;
  if (this->has_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::model(this), output);
  }

  // repeated string additional_words = 2;
  for (int i = 0, n = this->additional_words_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->additional_words(i).data(), static_cast<int>(this->additional_words(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.RecognitionConfig.additional_words");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->additional_words(i), output);
  }

  // repeated .Speechpro.Cloud.ASR.UserTranscriptions user_transcriptions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_transcriptions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->user_transcriptions(static_cast<int>(i)),
      output);
  }

  // .Speechpro.Cloud.ASR.Auth auth = 4;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::auth(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.RecognitionConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognitionConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.RecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Speechpro.Cloud.ASR.Model model = 1;
  if (this->has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::model(this), target);
  }

  // repeated string additional_words = 2;
  for (int i = 0, n = this->additional_words_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->additional_words(i).data(), static_cast<int>(this->additional_words(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.RecognitionConfig.additional_words");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->additional_words(i), target);
  }

  // repeated .Speechpro.Cloud.ASR.UserTranscriptions user_transcriptions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_transcriptions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->user_transcriptions(static_cast<int>(i)), target);
  }

  // .Speechpro.Cloud.ASR.Auth auth = 4;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::auth(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.RecognitionConfig)
  return target;
}

size_t RecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.RecognitionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_words = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->additional_words_size());
  for (int i = 0, n = this->additional_words_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->additional_words(i));
  }

  // repeated .Speechpro.Cloud.ASR.UserTranscriptions user_transcriptions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->user_transcriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_transcriptions(static_cast<int>(i)));
    }
  }

  // .Speechpro.Cloud.ASR.Model model = 1;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  // .Speechpro.Cloud.ASR.Auth auth = 4;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognitionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognitionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.RecognitionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.RecognitionConfig)
    MergeFrom(*source);
  }
}

void RecognitionConfig::MergeFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_words_.MergeFrom(from.additional_words_);
  user_transcriptions_.MergeFrom(from.user_transcriptions_);
  if (from.has_model()) {
    mutable_model()->::Speechpro::Cloud::ASR::Model::MergeFrom(from.model());
  }
  if (from.has_auth()) {
    mutable_auth()->::Speechpro::Cloud::ASR::Auth::MergeFrom(from.auth());
  }
}

void RecognitionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionConfig::CopyFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionConfig::IsInitialized() const {
  return true;
}

void RecognitionConfig::Swap(RecognitionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognitionConfig::InternalSwap(RecognitionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  additional_words_.InternalSwap(CastToBase(&other->additional_words_));
  CastToBase(&user_transcriptions_)->InternalSwap(CastToBase(&other->user_transcriptions_));
  swap(model_, other->model_);
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognitionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Auth::InitAsDefaultInstance() {
}
class Auth::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Auth::kClientIdFieldNumber;
const int Auth::kDomainIdFieldNumber;
const int Auth::kApiKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Auth::Auth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.Auth)
}
Auth::Auth(const Auth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.domain_id().size() > 0) {
    domain_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.domain_id_);
  }
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.api_key().size() > 0) {
    api_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.Auth)
}

void Auth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Auth_AsrService_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Auth::~Auth() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.Auth)
  SharedDtor();
}

void Auth::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Auth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Auth& Auth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Auth_AsrService_2eproto.base);
  return *internal_default_instance();
}


void Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.Auth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Auth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_client_id(), ptr, ctx, "Speechpro.Cloud.ASR.Auth.client_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_domain_id(), ptr, ctx, "Speechpro.Cloud.ASR.Auth.domain_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_api_key(), ptr, ctx, "Speechpro.Cloud.ASR.Auth.api_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Auth::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.Auth)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Speechpro.Cloud.ASR.Auth.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->domain_id().data(), static_cast<int>(this->domain_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Speechpro.Cloud.ASR.Auth.domain_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string api_key = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_api_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->api_key().data(), static_cast<int>(this->api_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Speechpro.Cloud.ASR.Auth.api_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.Auth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.Auth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Auth::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.Auth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Auth.client_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->domain_id().data(), static_cast<int>(this->domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Auth.domain_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain_id(), output);
  }

  // string api_key = 3;
  if (this->api_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->api_key().data(), static_cast<int>(this->api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Auth.api_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->api_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.Auth)
}

::PROTOBUF_NAMESPACE_ID::uint8* Auth::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.Auth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Auth.client_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->domain_id().data(), static_cast<int>(this->domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Auth.domain_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->domain_id(), target);
  }

  // string api_key = 3;
  if (this->api_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->api_key().data(), static_cast<int>(this->api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Auth.api_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->api_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.Auth)
  return target;
}

size_t Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.Auth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->domain_id());
  }

  // string api_key = 3;
  if (this->api_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->api_key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Auth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  const Auth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Auth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.Auth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.Auth)
    MergeFrom(*source);
  }
}

void Auth::MergeFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.domain_id().size() > 0) {

    domain_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.domain_id_);
  }
  if (from.api_key().size() > 0) {

    api_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
}

void Auth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auth::CopyFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auth::IsInitialized() const {
  return true;
}

void Auth::Swap(Auth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Auth::InternalSwap(Auth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_id_.Swap(&other->domain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  api_key_.Swap(&other->api_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Auth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserTranscriptions::InitAsDefaultInstance() {
}
class UserTranscriptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTranscriptions::kWordFieldNumber;
const int UserTranscriptions::kTranscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTranscriptions::UserTranscriptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.UserTranscriptions)
}
UserTranscriptions::UserTranscriptions(const UserTranscriptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.word().size() > 0) {
    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  transcription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.transcription().size() > 0) {
    transcription_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transcription_);
  }
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.UserTranscriptions)
}

void UserTranscriptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserTranscriptions_AsrService_2eproto.base);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transcription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserTranscriptions::~UserTranscriptions() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.UserTranscriptions)
  SharedDtor();
}

void UserTranscriptions::SharedDtor() {
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transcription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserTranscriptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserTranscriptions& UserTranscriptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserTranscriptions_AsrService_2eproto.base);
  return *internal_default_instance();
}


void UserTranscriptions::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.UserTranscriptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transcription_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserTranscriptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_word(), ptr, ctx, "Speechpro.Cloud.ASR.UserTranscriptions.word");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transcription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_transcription(), ptr, ctx, "Speechpro.Cloud.ASR.UserTranscriptions.transcription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserTranscriptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.UserTranscriptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string word = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->word().data(), static_cast<int>(this->word().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Speechpro.Cloud.ASR.UserTranscriptions.word"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transcription = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_transcription()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->transcription().data(), static_cast<int>(this->transcription().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Speechpro.Cloud.ASR.UserTranscriptions.transcription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.UserTranscriptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.UserTranscriptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserTranscriptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.UserTranscriptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (this->word().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.UserTranscriptions.word");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  // string transcription = 2;
  if (this->transcription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcription().data(), static_cast<int>(this->transcription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.UserTranscriptions.transcription");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transcription(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.UserTranscriptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserTranscriptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.UserTranscriptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (this->word().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.UserTranscriptions.word");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->word(), target);
  }

  // string transcription = 2;
  if (this->transcription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcription().data(), static_cast<int>(this->transcription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.UserTranscriptions.transcription");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->transcription(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.UserTranscriptions)
  return target;
}

size_t UserTranscriptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.UserTranscriptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 1;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->word());
  }

  // string transcription = 2;
  if (this->transcription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->transcription());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTranscriptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.UserTranscriptions)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTranscriptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserTranscriptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.UserTranscriptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.UserTranscriptions)
    MergeFrom(*source);
  }
}

void UserTranscriptions::MergeFrom(const UserTranscriptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.UserTranscriptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {

    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  if (from.transcription().size() > 0) {

    transcription_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transcription_);
  }
}

void UserTranscriptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.UserTranscriptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTranscriptions::CopyFrom(const UserTranscriptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.UserTranscriptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTranscriptions::IsInitialized() const {
  return true;
}

void UserTranscriptions::Swap(UserTranscriptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserTranscriptions::InternalSwap(UserTranscriptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  word_.Swap(&other->word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transcription_.Swap(&other->transcription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserTranscriptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeechRecognitionResults::InitAsDefaultInstance() {
  ::Speechpro::Cloud::ASR::_SpeechRecognitionResults_default_instance_._instance.get_mutable()->text_ = const_cast< ::Speechpro::Cloud::ASR::Text*>(
      ::Speechpro::Cloud::ASR::Text::internal_default_instance());
}
class SpeechRecognitionResults::HasBitSetters {
 public:
  static const ::Speechpro::Cloud::ASR::Text& text(const SpeechRecognitionResults* msg);
};

const ::Speechpro::Cloud::ASR::Text&
SpeechRecognitionResults::HasBitSetters::text(const SpeechRecognitionResults* msg) {
  return *msg->text_;
}
void SpeechRecognitionResults::clear_text() {
  if (GetArenaNoVirtual() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionResults::kTextFieldNumber;
const int SpeechRecognitionResults::kPhraseConfidenceFieldNumber;
const int SpeechRecognitionResults::kIsFinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionResults::SpeechRecognitionResults()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.SpeechRecognitionResults)
}
SpeechRecognitionResults::SpeechRecognitionResults(const SpeechRecognitionResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_text()) {
    text_ = new ::Speechpro::Cloud::ASR::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  ::memcpy(&phrase_confidence_, &from.phrase_confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_final_) -
    reinterpret_cast<char*>(&phrase_confidence_)) + sizeof(is_final_));
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.SpeechRecognitionResults)
}

void SpeechRecognitionResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeechRecognitionResults_AsrService_2eproto.base);
  ::memset(&text_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_final_) -
      reinterpret_cast<char*>(&text_)) + sizeof(is_final_));
}

SpeechRecognitionResults::~SpeechRecognitionResults() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  SharedDtor();
}

void SpeechRecognitionResults::SharedDtor() {
  if (this != internal_default_instance()) delete text_;
}

void SpeechRecognitionResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeechRecognitionResults& SpeechRecognitionResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeechRecognitionResults_AsrService_2eproto.base);
  return *internal_default_instance();
}


void SpeechRecognitionResults::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  ::memset(&phrase_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_final_) -
      reinterpret_cast<char*>(&phrase_confidence_)) + sizeof(is_final_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeechRecognitionResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Speechpro.Cloud.ASR.Text text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float phrase_confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          phrase_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_final = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeechRecognitionResults::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Speechpro.Cloud.ASR.Text text = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float phrase_confidence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phrase_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_final = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeechRecognitionResults::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Speechpro.Cloud.ASR.Text text = 1;
  if (this->has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::text(this), output);
  }

  // float phrase_confidence = 2;
  if (!(this->phrase_confidence() <= 0 && this->phrase_confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->phrase_confidence(), output);
  }

  // bool is_final = 3;
  if (this->is_final() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_final(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.SpeechRecognitionResults)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeechRecognitionResults::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Speechpro.Cloud.ASR.Text text = 1;
  if (this->has_text()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::text(this), target);
  }

  // float phrase_confidence = 2;
  if (!(this->phrase_confidence() <= 0 && this->phrase_confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->phrase_confidence(), target);
  }

  // bool is_final = 3;
  if (this->is_final() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_final(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  return target;
}

size_t SpeechRecognitionResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Speechpro.Cloud.ASR.Text text = 1;
  if (this->has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // float phrase_confidence = 2;
  if (!(this->phrase_confidence() <= 0 && this->phrase_confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_final = 3;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeechRecognitionResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.SpeechRecognitionResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.SpeechRecognitionResults)
    MergeFrom(*source);
  }
}

void SpeechRecognitionResults::MergeFrom(const SpeechRecognitionResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    mutable_text()->::Speechpro::Cloud::ASR::Text::MergeFrom(from.text());
  }
  if (!(from.phrase_confidence() <= 0 && from.phrase_confidence() >= 0)) {
    set_phrase_confidence(from.phrase_confidence());
  }
  if (from.is_final() != 0) {
    set_is_final(from.is_final());
  }
}

void SpeechRecognitionResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionResults::CopyFrom(const SpeechRecognitionResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.SpeechRecognitionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionResults::IsInitialized() const {
  return true;
}

void SpeechRecognitionResults::Swap(SpeechRecognitionResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechRecognitionResults::InternalSwap(SpeechRecognitionResults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(text_, other->text_);
  swap(phrase_confidence_, other->phrase_confidence_);
  swap(is_final_, other->is_final_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechRecognitionResults::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ASR
}  // namespace Cloud
}  // namespace Speechpro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::RecognizeRequest* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::RecognizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::RecognizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::RecognitionConfig* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::RecognitionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::RecognitionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::Auth* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::Auth >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::Auth >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::UserTranscriptions* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::UserTranscriptions >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::UserTranscriptions >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::SpeechRecognitionResults* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::SpeechRecognitionResults >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::SpeechRecognitionResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
