// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_base_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DictorInfo_base_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Model_base_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Word_base_2eproto;
namespace Speechpro {
namespace Cloud {
namespace ASR {
class ModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Model> _instance;
} _Model_default_instance_;
class ListOfModelsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOfModels> _instance;
} _ListOfModels_default_instance_;
class FinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Finish> _instance;
} _Finish_default_instance_;
class TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Text> _instance;
} _Text_default_instance_;
class WordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Word> _instance;
} _Word_default_instance_;
class DictorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DictorInfo> _instance;
  int dictor_not_detected_;
  ::PROTOBUF_NAMESPACE_ID::int32 dictor_num_;
} _DictorInfo_default_instance_;
class SoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sound> _instance;
} _Sound_default_instance_;
}  // namespace ASR
}  // namespace Cloud
}  // namespace Speechpro
static void InitDefaultsscc_info_DictorInfo_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_DictorInfo_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::DictorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::DictorInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DictorInfo_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DictorInfo_base_2eproto}, {}};

static void InitDefaultsscc_info_Finish_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_Finish_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::Finish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::Finish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Finish_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Finish_base_2eproto}, {}};

static void InitDefaultsscc_info_ListOfModels_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_ListOfModels_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::ListOfModels();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::ListOfModels::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListOfModels_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ListOfModels_base_2eproto}, {
      &scc_info_Model_base_2eproto.base,}};

static void InitDefaultsscc_info_Model_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_Model_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::Model();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::Model::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Model_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Model_base_2eproto}, {}};

static void InitDefaultsscc_info_Sound_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_Sound_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::Sound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::Sound::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sound_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sound_base_2eproto}, {}};

static void InitDefaultsscc_info_Text_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_Text_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Text_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Text_base_2eproto}, {
      &scc_info_Word_base_2eproto.base,}};

static void InitDefaultsscc_info_Word_base_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Speechpro::Cloud::ASR::_Word_default_instance_;
    new (ptr) ::Speechpro::Cloud::ASR::Word();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speechpro::Cloud::ASR::Word::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Word_base_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Word_base_2eproto}, {
      &scc_info_DictorInfo_base_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_base_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_base_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Model, id_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Model, active_sessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::ListOfModels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::ListOfModels, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Finish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Text, words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Word, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Word, text_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Word, start_ms_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Word, length_ms_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Word, confidence_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Word, punctuation_mark_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Word, dictor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::DictorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::DictorInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Speechpro::Cloud::ASR::DictorInfoDefaultTypeInternal, dictor_not_detected_),
  offsetof(::Speechpro::Cloud::ASR::DictorInfoDefaultTypeInternal, dictor_num_),
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::DictorInfo, dictor_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Sound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speechpro::Cloud::ASR::Sound, samples_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Speechpro::Cloud::ASR::Model)},
  { 7, -1, sizeof(::Speechpro::Cloud::ASR::ListOfModels)},
  { 13, -1, sizeof(::Speechpro::Cloud::ASR::Finish)},
  { 18, -1, sizeof(::Speechpro::Cloud::ASR::Text)},
  { 24, -1, sizeof(::Speechpro::Cloud::ASR::Word)},
  { 35, -1, sizeof(::Speechpro::Cloud::ASR::DictorInfo)},
  { 43, -1, sizeof(::Speechpro::Cloud::ASR::Sound)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_Model_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_ListOfModels_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_Finish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_Word_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_DictorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Speechpro::Cloud::ASR::_Sound_default_instance_),
};

const char descriptor_table_protodef_base_2eproto[] =
  "\n\nbase.proto\022\023Speechpro.Cloud.ASR\",\n\005Mod"
  "el\022\n\n\002id\030\001 \001(\t\022\027\n\017active_sessions\030\002 \001(\004\""
  ":\n\014ListOfModels\022*\n\006models\030\001 \003(\0132\032.Speech"
  "pro.Cloud.ASR.Model\"\010\n\006Finish\"0\n\004Text\022(\n"
  "\005words\030\001 \003(\0132\031.Speechpro.Cloud.ASR.Word\""
  "\327\002\n\004Word\022\014\n\004text\030\001 \001(\t\022\020\n\010start_ms\030\002 \001(\003"
  "\022\021\n\tlength_ms\030\003 \001(\003\022\022\n\nconfidence\030\004 \001(\002\022"
  "C\n\020punctuation_mark\030\005 \001(\0162).Speechpro.Cl"
  "oud.ASR.Word.PunctuationMark\022/\n\006dictor\030\006"
  " \001(\0132\037.Speechpro.Cloud.ASR.DictorInfo\"\221\001"
  "\n\017PunctuationMark\022\010\n\004NONE\020\000\022\007\n\003DOT\020\001\022\t\n\005"
  "COMMA\020\002\022\t\n\005COLON\020\003\022\r\n\tSEMICOLON\020\004\022\025\n\021EXC"
  "LAMATION_POINT\020\005\022\021\n\rQUESTION_MARK\020\006\022\010\n\004D"
  "ASH\020\007\022\022\n\016SPEAKER_CHANGE\020\010\"\254\001\n\nDictorInfo"
  "\022P\n\023dictor_not_detected\030\001 \001(\01621.Speechpr"
  "o.Cloud.ASR.DictorInfo.DictorNotDetected"
  "H\000\022\024\n\ndictor_num\030\002 \001(\005H\000\"\'\n\021DictorNotDet"
  "ected\022\022\n\016UNKNOWN_DICTOR\020\000B\r\n\013dictor_info"
  "\"\030\n\005Sound\022\017\n\007samples\030\001 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_base_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_base_2eproto_sccs[7] = {
  &scc_info_DictorInfo_base_2eproto.base,
  &scc_info_Finish_base_2eproto.base,
  &scc_info_ListOfModels_base_2eproto.base,
  &scc_info_Model_base_2eproto.base,
  &scc_info_Sound_base_2eproto.base,
  &scc_info_Text_base_2eproto.base,
  &scc_info_Word_base_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_2eproto_once;
static bool descriptor_table_base_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto = {
  &descriptor_table_base_2eproto_initialized, descriptor_table_protodef_base_2eproto, "base.proto", 754,
  &descriptor_table_base_2eproto_once, descriptor_table_base_2eproto_sccs, descriptor_table_base_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_base_2eproto::offsets,
  file_level_metadata_base_2eproto, 7, file_level_enum_descriptors_base_2eproto, file_level_service_descriptors_base_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_base_2eproto), true);
namespace Speechpro {
namespace Cloud {
namespace ASR {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Word_PunctuationMark_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_2eproto);
  return file_level_enum_descriptors_base_2eproto[0];
}
bool Word_PunctuationMark_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Word_PunctuationMark Word::NONE;
constexpr Word_PunctuationMark Word::DOT;
constexpr Word_PunctuationMark Word::COMMA;
constexpr Word_PunctuationMark Word::COLON;
constexpr Word_PunctuationMark Word::SEMICOLON;
constexpr Word_PunctuationMark Word::EXCLAMATION_POINT;
constexpr Word_PunctuationMark Word::QUESTION_MARK;
constexpr Word_PunctuationMark Word::DASH;
constexpr Word_PunctuationMark Word::SPEAKER_CHANGE;
constexpr Word_PunctuationMark Word::PunctuationMark_MIN;
constexpr Word_PunctuationMark Word::PunctuationMark_MAX;
constexpr int Word::PunctuationMark_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DictorInfo_DictorNotDetected_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_2eproto);
  return file_level_enum_descriptors_base_2eproto[1];
}
bool DictorInfo_DictorNotDetected_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DictorInfo_DictorNotDetected DictorInfo::UNKNOWN_DICTOR;
constexpr DictorInfo_DictorNotDetected DictorInfo::DictorNotDetected_MIN;
constexpr DictorInfo_DictorNotDetected DictorInfo::DictorNotDetected_MAX;
constexpr int DictorInfo::DictorNotDetected_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Model::InitAsDefaultInstance() {
}
class Model::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kIdFieldNumber;
const int Model::kActiveSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  active_sessions_ = from.active_sessions_;
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.Model)
}

void Model::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Model_base_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_sessions_ = PROTOBUF_ULONGLONG(0);
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.Model)
  SharedDtor();
}

void Model::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Model& Model::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Model_base_2eproto.base);
  return *internal_default_instance();
}


void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_sessions_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Model::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "Speechpro.Cloud.ASR.Model.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 active_sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          active_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Model::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.Model)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Speechpro.Cloud.ASR.Model.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 active_sessions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.Model)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Model::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Model.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // uint64 active_sessions = 2;
  if (this->active_sessions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->active_sessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.Model)
}

::PROTOBUF_NAMESPACE_ID::uint8* Model::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Model.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // uint64 active_sessions = 2;
  if (this->active_sessions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->active_sessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.Model)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // uint64 active_sessions = 2;
  if (this->active_sessions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->active_sessions());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Model::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Model>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.Model)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.active_sessions() != 0) {
    set_active_sessions(from.active_sessions());
  }
}

void Model::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(active_sessions_, other->active_sessions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOfModels::InitAsDefaultInstance() {
}
class ListOfModels::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListOfModels::kModelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListOfModels::ListOfModels()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.ListOfModels)
}
ListOfModels::ListOfModels(const ListOfModels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      models_(from.models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.ListOfModels)
}

void ListOfModels::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOfModels_base_2eproto.base);
}

ListOfModels::~ListOfModels() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.ListOfModels)
  SharedDtor();
}

void ListOfModels::SharedDtor() {
}

void ListOfModels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOfModels& ListOfModels::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOfModels_base_2eproto.base);
  return *internal_default_instance();
}


void ListOfModels::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.ListOfModels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListOfModels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Speechpro.Cloud.ASR.Model models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListOfModels::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.ListOfModels)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Speechpro.Cloud.ASR.Model models = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_models()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.ListOfModels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.ListOfModels)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListOfModels::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.ListOfModels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Speechpro.Cloud.ASR.Model models = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->models_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->models(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.ListOfModels)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOfModels::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.ListOfModels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Speechpro.Cloud.ASR.Model models = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->models_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->models(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.ListOfModels)
  return target;
}

size_t ListOfModels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.ListOfModels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Speechpro.Cloud.ASR.Model models = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->models_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->models(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOfModels::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.ListOfModels)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOfModels* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOfModels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.ListOfModels)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.ListOfModels)
    MergeFrom(*source);
  }
}

void ListOfModels::MergeFrom(const ListOfModels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.ListOfModels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
}

void ListOfModels::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.ListOfModels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOfModels::CopyFrom(const ListOfModels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.ListOfModels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOfModels::IsInitialized() const {
  return true;
}

void ListOfModels::Swap(ListOfModels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListOfModels::InternalSwap(ListOfModels* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&models_)->InternalSwap(CastToBase(&other->models_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOfModels::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Finish::InitAsDefaultInstance() {
}
class Finish::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Finish::Finish()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.Finish)
}
Finish::Finish(const Finish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.Finish)
}

void Finish::SharedCtor() {
}

Finish::~Finish() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.Finish)
  SharedDtor();
}

void Finish::SharedDtor() {
}

void Finish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Finish& Finish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Finish_base_2eproto.base);
  return *internal_default_instance();
}


void Finish::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.Finish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Finish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Finish::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.Finish)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.Finish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.Finish)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Finish::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.Finish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.Finish)
}

::PROTOBUF_NAMESPACE_ID::uint8* Finish::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.Finish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.Finish)
  return target;
}

size_t Finish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.Finish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Finish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.Finish)
  GOOGLE_DCHECK_NE(&from, this);
  const Finish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Finish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.Finish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.Finish)
    MergeFrom(*source);
  }
}

void Finish::MergeFrom(const Finish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.Finish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Finish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.Finish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Finish::CopyFrom(const Finish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.Finish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Finish::IsInitialized() const {
  return true;
}

void Finish::Swap(Finish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Finish::InternalSwap(Finish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Finish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Text::InitAsDefaultInstance() {
}
class Text::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Text::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Text::Text()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.Text)
}

void Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Text_base_2eproto.base);
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.Text)
  SharedDtor();
}

void Text::SharedDtor() {
}

void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Text& Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Text_base_2eproto.base);
  return *internal_default_instance();
}


void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Speechpro.Cloud.ASR.Word words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Text::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.Text)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Speechpro.Cloud.ASR.Word words = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.Text)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Text::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Speechpro.Cloud.ASR.Word words = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->words(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.Text)
}

::PROTOBUF_NAMESPACE_ID::uint8* Text::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Speechpro.Cloud.ASR.Word words = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->words(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.Text)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Speechpro.Cloud.ASR.Word words = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->words(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Text::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Text* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Text>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.Text)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
}

void Text::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::Swap(Text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Text::InternalSwap(Text* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&words_)->InternalSwap(CastToBase(&other->words_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Word::InitAsDefaultInstance() {
  ::Speechpro::Cloud::ASR::_Word_default_instance_._instance.get_mutable()->dictor_ = const_cast< ::Speechpro::Cloud::ASR::DictorInfo*>(
      ::Speechpro::Cloud::ASR::DictorInfo::internal_default_instance());
}
class Word::HasBitSetters {
 public:
  static const ::Speechpro::Cloud::ASR::DictorInfo& dictor(const Word* msg);
};

const ::Speechpro::Cloud::ASR::DictorInfo&
Word::HasBitSetters::dictor(const Word* msg) {
  return *msg->dictor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Word::kTextFieldNumber;
const int Word::kStartMsFieldNumber;
const int Word::kLengthMsFieldNumber;
const int Word::kConfidenceFieldNumber;
const int Word::kPunctuationMarkFieldNumber;
const int Word::kDictorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Word::Word()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.Word)
}
Word::Word(const Word& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_dictor()) {
    dictor_ = new ::Speechpro::Cloud::ASR::DictorInfo(*from.dictor_);
  } else {
    dictor_ = nullptr;
  }
  ::memcpy(&start_ms_, &from.start_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&punctuation_mark_) -
    reinterpret_cast<char*>(&start_ms_)) + sizeof(punctuation_mark_));
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.Word)
}

void Word::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Word_base_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dictor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&punctuation_mark_) -
      reinterpret_cast<char*>(&dictor_)) + sizeof(punctuation_mark_));
}

Word::~Word() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.Word)
  SharedDtor();
}

void Word::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dictor_;
}

void Word::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Word& Word::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Word_base_2eproto.base);
  return *internal_default_instance();
}


void Word::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.Word)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dictor_ != nullptr) {
    delete dictor_;
  }
  dictor_ = nullptr;
  ::memset(&start_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&punctuation_mark_) -
      reinterpret_cast<char*>(&start_ms_)) + sizeof(punctuation_mark_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Word::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "Speechpro.Cloud.ASR.Word.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 length_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          length_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Speechpro.Cloud.ASR.Word.PunctuationMark punctuation_mark = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_punctuation_mark(static_cast<::Speechpro::Cloud::ASR::Word_PunctuationMark>(val));
        } else goto handle_unusual;
        continue;
      // .Speechpro.Cloud.ASR.DictorInfo dictor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_dictor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Word::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.Word)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Speechpro.Cloud.ASR.Word.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 length_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Speechpro.Cloud.ASR.Word.PunctuationMark punctuation_mark = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_punctuation_mark(static_cast< ::Speechpro::Cloud::ASR::Word_PunctuationMark >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Speechpro.Cloud.ASR.DictorInfo dictor = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.Word)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.Word)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Word::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.Word)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Word.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // int64 start_ms = 2;
  if (this->start_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->start_ms(), output);
  }

  // int64 length_ms = 3;
  if (this->length_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->length_ms(), output);
  }

  // float confidence = 4;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  // .Speechpro.Cloud.ASR.Word.PunctuationMark punctuation_mark = 5;
  if (this->punctuation_mark() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->punctuation_mark(), output);
  }

  // .Speechpro.Cloud.ASR.DictorInfo dictor = 6;
  if (this->has_dictor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::dictor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.Word)
}

::PROTOBUF_NAMESPACE_ID::uint8* Word::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.Word)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Speechpro.Cloud.ASR.Word.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // int64 start_ms = 2;
  if (this->start_ms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->start_ms(), target);
  }

  // int64 length_ms = 3;
  if (this->length_ms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->length_ms(), target);
  }

  // float confidence = 4;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  // .Speechpro.Cloud.ASR.Word.PunctuationMark punctuation_mark = 5;
  if (this->punctuation_mark() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->punctuation_mark(), target);
  }

  // .Speechpro.Cloud.ASR.DictorInfo dictor = 6;
  if (this->has_dictor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::dictor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.Word)
  return target;
}

size_t Word::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.Word)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .Speechpro.Cloud.ASR.DictorInfo dictor = 6;
  if (this->has_dictor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dictor_);
  }

  // int64 start_ms = 2;
  if (this->start_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->start_ms());
  }

  // int64 length_ms = 3;
  if (this->length_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->length_ms());
  }

  // float confidence = 4;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // .Speechpro.Cloud.ASR.Word.PunctuationMark punctuation_mark = 5;
  if (this->punctuation_mark() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->punctuation_mark());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Word::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.Word)
  GOOGLE_DCHECK_NE(&from, this);
  const Word* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Word>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.Word)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.Word)
    MergeFrom(*source);
  }
}

void Word::MergeFrom(const Word& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.Word)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_dictor()) {
    mutable_dictor()->::Speechpro::Cloud::ASR::DictorInfo::MergeFrom(from.dictor());
  }
  if (from.start_ms() != 0) {
    set_start_ms(from.start_ms());
  }
  if (from.length_ms() != 0) {
    set_length_ms(from.length_ms());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    set_confidence(from.confidence());
  }
  if (from.punctuation_mark() != 0) {
    set_punctuation_mark(from.punctuation_mark());
  }
}

void Word::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Word::CopyFrom(const Word& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Word::IsInitialized() const {
  return true;
}

void Word::Swap(Word* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Word::InternalSwap(Word* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dictor_, other->dictor_);
  swap(start_ms_, other->start_ms_);
  swap(length_ms_, other->length_ms_);
  swap(confidence_, other->confidence_);
  swap(punctuation_mark_, other->punctuation_mark_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Word::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DictorInfo::InitAsDefaultInstance() {
  ::Speechpro::Cloud::ASR::_DictorInfo_default_instance_.dictor_not_detected_ = 0;
  ::Speechpro::Cloud::ASR::_DictorInfo_default_instance_.dictor_num_ = 0;
}
class DictorInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictorInfo::kDictorNotDetectedFieldNumber;
const int DictorInfo::kDictorNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictorInfo::DictorInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.DictorInfo)
}
DictorInfo::DictorInfo(const DictorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_dictor_info();
  switch (from.dictor_info_case()) {
    case kDictorNotDetected: {
      set_dictor_not_detected(from.dictor_not_detected());
      break;
    }
    case kDictorNum: {
      set_dictor_num(from.dictor_num());
      break;
    }
    case DICTOR_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.DictorInfo)
}

void DictorInfo::SharedCtor() {
  clear_has_dictor_info();
}

DictorInfo::~DictorInfo() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.DictorInfo)
  SharedDtor();
}

void DictorInfo::SharedDtor() {
  if (has_dictor_info()) {
    clear_dictor_info();
  }
}

void DictorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DictorInfo& DictorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictorInfo_base_2eproto.base);
  return *internal_default_instance();
}


void DictorInfo::clear_dictor_info() {
// @@protoc_insertion_point(one_of_clear_start:Speechpro.Cloud.ASR.DictorInfo)
  switch (dictor_info_case()) {
    case kDictorNotDetected: {
      // No need to clear
      break;
    }
    case kDictorNum: {
      // No need to clear
      break;
    }
    case DICTOR_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DICTOR_INFO_NOT_SET;
}


void DictorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.DictorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_dictor_info();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DictorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Speechpro.Cloud.ASR.DictorInfo.DictorNotDetected dictor_not_detected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dictor_not_detected(static_cast<::Speechpro::Cloud::ASR::DictorInfo_DictorNotDetected>(val));
        } else goto handle_unusual;
        continue;
      // int32 dictor_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_dictor_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DictorInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.DictorInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Speechpro.Cloud.ASR.DictorInfo.DictorNotDetected dictor_not_detected = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dictor_not_detected(static_cast< ::Speechpro::Cloud::ASR::DictorInfo_DictorNotDetected >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dictor_num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_dictor_info();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dictor_info_.dictor_num_)));
          set_has_dictor_num();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.DictorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.DictorInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DictorInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.DictorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Speechpro.Cloud.ASR.DictorInfo.DictorNotDetected dictor_not_detected = 1;
  if (has_dictor_not_detected()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->dictor_not_detected(), output);
  }

  // int32 dictor_num = 2;
  if (has_dictor_num()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->dictor_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.DictorInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* DictorInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.DictorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Speechpro.Cloud.ASR.DictorInfo.DictorNotDetected dictor_not_detected = 1;
  if (has_dictor_not_detected()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->dictor_not_detected(), target);
  }

  // int32 dictor_num = 2;
  if (has_dictor_num()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->dictor_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.DictorInfo)
  return target;
}

size_t DictorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.DictorInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (dictor_info_case()) {
    // .Speechpro.Cloud.ASR.DictorInfo.DictorNotDetected dictor_not_detected = 1;
    case kDictorNotDetected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dictor_not_detected());
      break;
    }
    // int32 dictor_num = 2;
    case kDictorNum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dictor_num());
      break;
    }
    case DICTOR_INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.DictorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DictorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DictorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.DictorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.DictorInfo)
    MergeFrom(*source);
  }
}

void DictorInfo::MergeFrom(const DictorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.DictorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.dictor_info_case()) {
    case kDictorNotDetected: {
      set_dictor_not_detected(from.dictor_not_detected());
      break;
    }
    case kDictorNum: {
      set_dictor_num(from.dictor_num());
      break;
    }
    case DICTOR_INFO_NOT_SET: {
      break;
    }
  }
}

void DictorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.DictorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictorInfo::CopyFrom(const DictorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.DictorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictorInfo::IsInitialized() const {
  return true;
}

void DictorInfo::Swap(DictorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictorInfo::InternalSwap(DictorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dictor_info_, other->dictor_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sound::InitAsDefaultInstance() {
}
class Sound::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sound::kSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sound::Sound()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Speechpro.Cloud.ASR.Sound)
}
Sound::Sound(const Sound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  samples_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.samples().size() > 0) {
    samples_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.samples_);
  }
  // @@protoc_insertion_point(copy_constructor:Speechpro.Cloud.ASR.Sound)
}

void Sound::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sound_base_2eproto.base);
  samples_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Sound::~Sound() {
  // @@protoc_insertion_point(destructor:Speechpro.Cloud.ASR.Sound)
  SharedDtor();
}

void Sound::SharedDtor() {
  samples_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sound& Sound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sound_base_2eproto.base);
  return *internal_default_instance();
}


void Sound::Clear() {
// @@protoc_insertion_point(message_clear_start:Speechpro.Cloud.ASR.Sound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_samples(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sound::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Speechpro.Cloud.ASR.Sound)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes samples = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Speechpro.Cloud.ASR.Sound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Speechpro.Cloud.ASR.Sound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sound::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Speechpro.Cloud.ASR.Sound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes samples = 1;
  if (this->samples().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->samples(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Speechpro.Cloud.ASR.Sound)
}

::PROTOBUF_NAMESPACE_ID::uint8* Sound::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speechpro.Cloud.ASR.Sound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes samples = 1;
  if (this->samples().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->samples(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speechpro.Cloud.ASR.Sound)
  return target;
}

size_t Sound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speechpro.Cloud.ASR.Sound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes samples = 1;
  if (this->samples().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->samples());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speechpro.Cloud.ASR.Sound)
  GOOGLE_DCHECK_NE(&from, this);
  const Sound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speechpro.Cloud.ASR.Sound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speechpro.Cloud.ASR.Sound)
    MergeFrom(*source);
  }
}

void Sound::MergeFrom(const Sound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speechpro.Cloud.ASR.Sound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.samples().size() > 0) {

    samples_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.samples_);
  }
}

void Sound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speechpro.Cloud.ASR.Sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sound::CopyFrom(const Sound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speechpro.Cloud.ASR.Sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sound::IsInitialized() const {
  return true;
}

void Sound::Swap(Sound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sound::InternalSwap(Sound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  samples_.Swap(&other->samples_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Sound::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ASR
}  // namespace Cloud
}  // namespace Speechpro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::Model* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::Model >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::ListOfModels* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::ListOfModels >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::ListOfModels >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::Finish* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::Finish >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::Finish >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::Text* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::Text >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::Word* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::Word >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::Word >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::DictorInfo* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::DictorInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::DictorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Speechpro::Cloud::ASR::Sound* Arena::CreateMaybeMessage< ::Speechpro::Cloud::ASR::Sound >(Arena* arena) {
  return Arena::CreateInternal< ::Speechpro::Cloud::ASR::Sound >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
