// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AsrService.proto

#include "AsrService.pb.h"
#include "AsrService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Speechpro {
namespace Cloud {
namespace ASR {

static const char* SpeechRecognition_method_names[] = {
  "/Speechpro.Cloud.ASR.SpeechRecognition/GetListOfSpeechRecognitionModels",
  "/Speechpro.Cloud.ASR.SpeechRecognition/RecognizeSpeech",
};

std::unique_ptr< SpeechRecognition::Stub> SpeechRecognition::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpeechRecognition::Stub> stub(new SpeechRecognition::Stub(channel));
  return stub;
}

SpeechRecognition::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetListOfSpeechRecognitionModels_(SpeechRecognition_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecognizeSpeech_(SpeechRecognition_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status SpeechRecognition::Stub::GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::Speechpro::Cloud::ASR::ListOfModels* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetListOfSpeechRecognitionModels_, context, request, response);
}

void SpeechRecognition::Stub::experimental_async::GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth* request, ::Speechpro::Cloud::ASR::ListOfModels* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetListOfSpeechRecognitionModels_, context, request, response, std::move(f));
}

void SpeechRecognition::Stub::experimental_async::GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Speechpro::Cloud::ASR::ListOfModels* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetListOfSpeechRecognitionModels_, context, request, response, std::move(f));
}

void SpeechRecognition::Stub::experimental_async::GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth* request, ::Speechpro::Cloud::ASR::ListOfModels* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetListOfSpeechRecognitionModels_, context, request, response, reactor);
}

void SpeechRecognition::Stub::experimental_async::GetListOfSpeechRecognitionModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Speechpro::Cloud::ASR::ListOfModels* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetListOfSpeechRecognitionModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Speechpro::Cloud::ASR::ListOfModels>* SpeechRecognition::Stub::AsyncGetListOfSpeechRecognitionModelsRaw(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Speechpro::Cloud::ASR::ListOfModels>::Create(channel_.get(), cq, rpcmethod_GetListOfSpeechRecognitionModels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Speechpro::Cloud::ASR::ListOfModels>* SpeechRecognition::Stub::PrepareAsyncGetListOfSpeechRecognitionModelsRaw(::grpc::ClientContext* context, const ::Speechpro::Cloud::ASR::Auth& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Speechpro::Cloud::ASR::ListOfModels>::Create(channel_.get(), cq, rpcmethod_GetListOfSpeechRecognitionModels_, context, request, false);
}

::grpc::ClientReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* SpeechRecognition::Stub::RecognizeSpeechRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>::Create(channel_.get(), rpcmethod_RecognizeSpeech_, context);
}

void SpeechRecognition::Stub::experimental_async::RecognizeSpeech(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Speechpro::Cloud::ASR::RecognizeRequest,::Speechpro::Cloud::ASR::SpeechRecognitionResults>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::Speechpro::Cloud::ASR::RecognizeRequest,::Speechpro::Cloud::ASR::SpeechRecognitionResults>::Create(stub_->channel_.get(), stub_->rpcmethod_RecognizeSpeech_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* SpeechRecognition::Stub::AsyncRecognizeSpeechRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>::Create(channel_.get(), cq, rpcmethod_RecognizeSpeech_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>* SpeechRecognition::Stub::PrepareAsyncRecognizeSpeechRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>::Create(channel_.get(), cq, rpcmethod_RecognizeSpeech_, context, false, nullptr);
}

SpeechRecognition::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpeechRecognition_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpeechRecognition::Service, ::Speechpro::Cloud::ASR::Auth, ::Speechpro::Cloud::ASR::ListOfModels>(
          std::mem_fn(&SpeechRecognition::Service::GetListOfSpeechRecognitionModels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpeechRecognition_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SpeechRecognition::Service, ::Speechpro::Cloud::ASR::RecognizeRequest, ::Speechpro::Cloud::ASR::SpeechRecognitionResults>(
          std::mem_fn(&SpeechRecognition::Service::RecognizeSpeech), this)));
}

SpeechRecognition::Service::~Service() {
}

::grpc::Status SpeechRecognition::Service::GetListOfSpeechRecognitionModels(::grpc::ServerContext* context, const ::Speechpro::Cloud::ASR::Auth* request, ::Speechpro::Cloud::ASR::ListOfModels* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpeechRecognition::Service::RecognizeSpeech(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Speechpro::Cloud::ASR::SpeechRecognitionResults, ::Speechpro::Cloud::ASR::RecognizeRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Speechpro
}  // namespace Cloud
}  // namespace ASR

